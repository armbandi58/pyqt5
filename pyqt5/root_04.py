# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mw_04.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from controlpanel import Ui_controlpanel
import serial.tools.list_ports
from PyQt5.QtGui import QIcon

connection = 1

class Ui_MainWindow(object):
    def windows2(self):
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_controlpanel()
        self.ui.setupUi(self.window2)
        self.window2.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(798, 400)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(5, 10, 461, 361))
        self.textBrowser.setObjectName("textBrowser")
        
        self.connecting_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.connecting_label.setFont(font)        
        self.connecting_label.setGeometry(QtCore.QRect(540, 10, 271, 31))
        self.connecting_label.setObjectName("connecting_label")


        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(650, 230, 131, 51))
        self.checkBox.setObjectName("checkBox")
       
        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.connect_to_com())
        self.pushButton.setGeometry(QtCore.QRect(470, 60, 161, 81))
        self.pushButton.setObjectName("pushButton")
        
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.disconnect())
        self.pushButton_2.setGeometry(QtCore.QRect(630, 60, 161, 81))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.get_DATA())
        self.pushButton_3.setGeometry(QtCore.QRect(470, 150, 321, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.clicked.connect(self.windows2)
        self.pushButton_4.setGeometry(QtCore.QRect(470, 210, 161, 81))
        self.pushButton_4.setObjectName("pushButton_4")
        
        self.button_clear = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.clear_terminal())
        self.button_clear.setGeometry(QtCore.QRect(540, 340, 161, 41))
        self.button_clear.setObjectName("button_clear")
        

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "IRA - Mark V.2"))
        self.connecting_label.setText(_translate("MainWindow", "No connection"))
        self.checkBox.setText(_translate("MainWindow", "LED blink"))
        self.pushButton.setText(_translate("MainWindow", "Connect"))
        self.pushButton_2.setText(_translate("MainWindow", "Disconnect"))
        self.pushButton_3.setText(_translate("MainWindow", "READ the errorcode"))
        self.pushButton_4.setText(_translate("MainWindow", "ControlPanel"))
        self.button_clear.setText(_translate("MainWindow","Clear terminal"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        

    def connect_to_com(self):
        global connection
        if connection == 1:
            getPort()
            found_Ports = getPort()
            connectPort = findPort(found_Ports)
            if connectPort != 'None':
                self.textBrowser.append("[+] Connected to '"+ str(connectPort) + "'")
                var_serial = serial.Serial(connectPort, baudrate=9600, timeout=1000)
                connection = 2
                self.connecting_label.setText("Connected")
                    #flag_while = True
            else:
                self.textBrowser.append("[-] ERROR, can`t connected to device")
        else:
            self.textBrowser.append("Already CONNECTED")

    def disconnect(self):
        global connection
        if connection == 2:
            var_serial = serial.Serial(connectPort, baudrate=9600, timeout=1000)
            var_serial.close()
            self.textBrowser.append("[+] Disconnected from '"+ str(connectPort) + "'")
            connection = 1
            self.connecting_label.setText("Disconnected")
        else:
            self.textBrowser.append("Already DISCONNECTED")

    def get_DATA(self):
        var_serial = serial.Serial(connectPort, baudrate=9600, timeout=1000)
        self.textBrowser.append(var_serial.readline(1000).decode('utf'))

    def clear_terminal(self):
        self.textBrowser.setText("")

def getPort():
    ports = serial.tools.list_ports.comports()
    return ports

def findPort(portsFound):
    comPort = 'None'
    nbr_of_Connection = len(portsFound)
    global found_Ports

    for i in range (0,nbr_of_Connection):
        port = found_Ports[i]
        strPort = str(port)
        if 'STM' in strPort:
            splitPort = strPort.split(' ')
            comPort = (splitPort[0])
    return comPort

    def test(self):
        self.textBrowser.append("Na")

found_Ports = getPort()
connectPort = findPort(found_Ports)

rob = 'robot.png'

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    app.setWindowIcon(QIcon(rob))
    MainWindow.show()
    sys.exit(app.exec_())

"""


def getPort():
    ports = serial.tools.list_ports.comports()
    return ports

def findPort(portsFound):
    comPort = 'None'
    nbr_of_Connection = len(portsFound)
    global found_Ports

    for i in range (0,nbr_of_Connection):
        port = found_Ports[i]
        strPort = str(port)
        if 'STM' in strPort:
            splitPort = strPort.split(' ')
            comPort = (splitPort[0])
    return comPort

found_Ports = getPort()
connectPort = findPort(found_Ports)

if connectPort != 'None':
    print("[+] Kapcsolat el")
    var_serial = serial.Serial(connectPort, baudrate=9600, timeout=1000)
    flag_while = True
else:
    print("[+] Error, nem sikerult a kapcsolat")

while flag_while:
    try:
        print(var_serial.readline(1000).decode('utf'), end = '')
    except:
        print("[+] Progi leall")
        flag_while = False
        raise SystemExit

"""